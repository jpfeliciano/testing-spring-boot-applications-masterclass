name: Build & Test Maven Project
on:
  push:
    branches:
      - master
    pull_request:
      types: [ opened, synchronize, reopened ]
jobs:
  build-and-test:
    runs-on: ubuntu-20.04
    name: Build Application
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup for JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
          java-package: jdk
          cache: maven

      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Setup Node 16
        uses: actions/setup-node@v3
        with:
          cache: npm
          cache-dependency-path: src/frontend/package-lock.json

      - name: Build & Test application
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./mvnw -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=jpfeliciano_testing-spring-boot-applications-masterclass

      - name: Ensure unit tests can be parallelized
        run: ./mvnw test -Djunit.jupiter.execution.parallel.enabled=true -Djunit.jupiter.execution.parallel.mode.default=same_thread -Djunit.jupiter.execution.parallel.mode.classes.default=concurrent

      - name: Flatten Selenide Screenshots and HTML Source Code on Failure
        if: ${{ failure() }}
        working-directory: target
        env:
          SOURCE_FOLDER: selenide-screenshots
          DESTINATION_FOLDER: aggregated-outcome
        run: |
          mkdir "$DESTINATION_FOLDER"

          if [ -d "$SOURCE_FOLDER" ]; then
            find "$SOURCE_FOLDER" -type f -name '*.png' -exec mv -i {} "$DESTINATION_FOLDER" \;
            find "$SOURCE_FOLDER" -type f -name '*.html' -exec mv -i {} "$DESTINATION_FOLDER" \;
          else
            echo "No Selenide failure artifacts found in folder $SOURCE_FOLDER"
          fi

      - name: Archive Selenide Outcome on Failure
        uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: selenide-failure-captures
          path: target/aggregated-outcome
